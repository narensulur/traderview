{"ast":null,"code":"// Mock API service for development mode with sample data\nexport const mockApi = {\n  // Check if we're in development mode with sample data\n  isUsingMockData: () => {\n    return process.env.NODE_ENV === 'development' && localStorage.getItem('traderview_sample_data') !== null;\n  },\n  // Get sample data from localStorage\n  getSampleData: () => {\n    const data = localStorage.getItem('traderview_sample_data');\n    return data ? JSON.parse(data) : null;\n  },\n  // Mock trading accounts API\n  getActiveAccounts: () => {\n    const sampleData = mockApi.getSampleData();\n    return Promise.resolve({\n      data: (sampleData === null || sampleData === void 0 ? void 0 : sampleData.accounts) || []\n    });\n  },\n  // Mock orders API\n  getOrdersByAccount: accountId => {\n    const sampleData = mockApi.getSampleData();\n    return Promise.resolve({\n      data: (sampleData === null || sampleData === void 0 ? void 0 : sampleData.orders) || []\n    });\n  },\n  // Mock symbols API\n  getSymbolsWithWeeklyStats: accountId => {\n    const sampleData = mockApi.getSampleData();\n    return Promise.resolve({\n      data: (sampleData === null || sampleData === void 0 ? void 0 : sampleData.symbols) || []\n    });\n  },\n  // Mock brokers API\n  getActiveBrokers: () => {\n    const sampleData = mockApi.getSampleData();\n    return Promise.resolve({\n      data: (sampleData === null || sampleData === void 0 ? void 0 : sampleData.brokers) || []\n    });\n  },\n  // Mock analytics API\n  getAnalytics: accountId => {\n    const sampleData = mockApi.getSampleData();\n    const orders = (sampleData === null || sampleData === void 0 ? void 0 : sampleData.orders) || [];\n\n    // Calculate analytics from sample orders\n    const totalTrades = orders.length;\n    const totalPnl = orders.reduce((sum, order) => sum + (order.realizedPnl || 0), 0);\n    const winningTrades = orders.filter(order => (order.realizedPnl || 0) > 0).length;\n    const losingTrades = orders.filter(order => (order.realizedPnl || 0) < 0).length;\n    const winRate = totalTrades > 0 ? winningTrades / totalTrades * 100 : 0;\n\n    // Group by symbol for top performers\n    const symbolStats = {};\n    orders.forEach(order => {\n      if (!symbolStats[order.symbolTicker]) {\n        symbolStats[order.symbolTicker] = {\n          symbol: order.symbolTicker,\n          trades: 0,\n          pnl: 0,\n          volume: 0\n        };\n      }\n      symbolStats[order.symbolTicker].trades++;\n      symbolStats[order.symbolTicker].pnl += order.realizedPnl || 0;\n      symbolStats[order.symbolTicker].volume += order.quantity || 0;\n    });\n    const topPerformers = Object.values(symbolStats).sort((a, b) => b.pnl - a.pnl).slice(0, 5);\n\n    // Generate daily PnL data for the last 30 days\n    const dailyPnl = [];\n    for (let i = 29; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      const dayOrders = orders.filter(order => {\n        const orderDate = new Date(order.placedAt);\n        return orderDate.toDateString() === date.toDateString();\n      });\n      const dayPnl = dayOrders.reduce((sum, order) => sum + (order.realizedPnl || 0), 0);\n      dailyPnl.push({\n        date: date.toISOString().split('T')[0],\n        pnl: dayPnl,\n        trades: dayOrders.length\n      });\n    }\n    return Promise.resolve({\n      data: {\n        totalTrades,\n        totalPnl,\n        winningTrades,\n        losingTrades,\n        winRate,\n        topPerformers,\n        dailyPnl,\n        avgTradeSize: totalTrades > 0 ? orders.reduce((sum, order) => sum + (order.quantity || 0), 0) / totalTrades : 0,\n        largestWin: Math.max(...orders.map(order => order.realizedPnl || 0)),\n        largestLoss: Math.min(...orders.map(order => order.realizedPnl || 0))\n      }\n    });\n  },\n  // Mock dashboard API\n  getDashboardData: accountId => {\n    const sampleData = mockApi.getSampleData();\n    const orders = (sampleData === null || sampleData === void 0 ? void 0 : sampleData.orders) || [];\n    const symbols = (sampleData === null || sampleData === void 0 ? void 0 : sampleData.symbols) || [];\n\n    // Recent orders (last 10)\n    const recentOrders = orders.sort((a, b) => new Date(b.placedAt) - new Date(a.placedAt)).slice(0, 10);\n\n    // Top symbols by trades this week\n    const topSymbols = symbols.sort((a, b) => b.tradesThisWeek - a.tradesThisWeek).slice(0, 5);\n\n    // Calculate summary stats\n    const todayOrders = orders.filter(order => {\n      const orderDate = new Date(order.placedAt);\n      const today = new Date();\n      return orderDate.toDateString() === today.toDateString();\n    });\n    const weekOrders = orders.filter(order => {\n      const orderDate = new Date(order.placedAt);\n      const weekAgo = new Date();\n      weekAgo.setDate(weekAgo.getDate() - 7);\n      return orderDate >= weekAgo;\n    });\n    return Promise.resolve({\n      data: {\n        recentOrders,\n        topSymbols,\n        todayStats: {\n          trades: todayOrders.length,\n          pnl: todayOrders.reduce((sum, order) => sum + (order.realizedPnl || 0), 0),\n          volume: todayOrders.reduce((sum, order) => sum + (order.quantity || 0), 0)\n        },\n        weekStats: {\n          trades: weekOrders.length,\n          pnl: weekOrders.reduce((sum, order) => sum + (order.realizedPnl || 0), 0),\n          volume: weekOrders.reduce((sum, order) => sum + (order.quantity || 0), 0)\n        }\n      }\n    });\n  }\n};","map":{"version":3,"names":["mockApi","isUsingMockData","process","env","NODE_ENV","localStorage","getItem","getSampleData","data","JSON","parse","getActiveAccounts","sampleData","Promise","resolve","accounts","getOrdersByAccount","accountId","orders","getSymbolsWithWeeklyStats","symbols","getActiveBrokers","brokers","getAnalytics","totalTrades","length","totalPnl","reduce","sum","order","realizedPnl","winningTrades","filter","losingTrades","winRate","symbolStats","forEach","symbolTicker","symbol","trades","pnl","volume","quantity","topPerformers","Object","values","sort","a","b","slice","dailyPnl","i","date","Date","setDate","getDate","dayOrders","orderDate","placedAt","toDateString","dayPnl","push","toISOString","split","avgTradeSize","largestWin","Math","max","map","largestLoss","min","getDashboardData","recentOrders","topSymbols","tradesThisWeek","todayOrders","today","weekOrders","weekAgo","todayStats","weekStats"],"sources":["/Users/nsulur/dev/personal/traderview/plugin-frontend/src/services/mockApi.js"],"sourcesContent":["// Mock API service for development mode with sample data\nexport const mockApi = {\n  // Check if we're in development mode with sample data\n  isUsingMockData: () => {\n    return process.env.NODE_ENV === 'development' && \n           localStorage.getItem('traderview_sample_data') !== null;\n  },\n\n  // Get sample data from localStorage\n  getSampleData: () => {\n    const data = localStorage.getItem('traderview_sample_data');\n    return data ? JSON.parse(data) : null;\n  },\n\n  // Mock trading accounts API\n  getActiveAccounts: () => {\n    const sampleData = mockApi.getSampleData();\n    return Promise.resolve({\n      data: sampleData?.accounts || []\n    });\n  },\n\n  // Mock orders API\n  getOrdersByAccount: (accountId) => {\n    const sampleData = mockApi.getSampleData();\n    return Promise.resolve({\n      data: sampleData?.orders || []\n    });\n  },\n\n  // Mock symbols API\n  getSymbolsWithWeeklyStats: (accountId) => {\n    const sampleData = mockApi.getSampleData();\n    return Promise.resolve({\n      data: sampleData?.symbols || []\n    });\n  },\n\n  // Mock brokers API\n  getActiveBrokers: () => {\n    const sampleData = mockApi.getSampleData();\n    return Promise.resolve({\n      data: sampleData?.brokers || []\n    });\n  },\n\n  // Mock analytics API\n  getAnalytics: (accountId) => {\n    const sampleData = mockApi.getSampleData();\n    const orders = sampleData?.orders || [];\n    \n    // Calculate analytics from sample orders\n    const totalTrades = orders.length;\n    const totalPnl = orders.reduce((sum, order) => sum + (order.realizedPnl || 0), 0);\n    const winningTrades = orders.filter(order => (order.realizedPnl || 0) > 0).length;\n    const losingTrades = orders.filter(order => (order.realizedPnl || 0) < 0).length;\n    const winRate = totalTrades > 0 ? (winningTrades / totalTrades) * 100 : 0;\n    \n    // Group by symbol for top performers\n    const symbolStats = {};\n    orders.forEach(order => {\n      if (!symbolStats[order.symbolTicker]) {\n        symbolStats[order.symbolTicker] = {\n          symbol: order.symbolTicker,\n          trades: 0,\n          pnl: 0,\n          volume: 0\n        };\n      }\n      symbolStats[order.symbolTicker].trades++;\n      symbolStats[order.symbolTicker].pnl += order.realizedPnl || 0;\n      symbolStats[order.symbolTicker].volume += order.quantity || 0;\n    });\n\n    const topPerformers = Object.values(symbolStats)\n      .sort((a, b) => b.pnl - a.pnl)\n      .slice(0, 5);\n\n    // Generate daily PnL data for the last 30 days\n    const dailyPnl = [];\n    for (let i = 29; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      const dayOrders = orders.filter(order => {\n        const orderDate = new Date(order.placedAt);\n        return orderDate.toDateString() === date.toDateString();\n      });\n      const dayPnl = dayOrders.reduce((sum, order) => sum + (order.realizedPnl || 0), 0);\n      \n      dailyPnl.push({\n        date: date.toISOString().split('T')[0],\n        pnl: dayPnl,\n        trades: dayOrders.length\n      });\n    }\n\n    return Promise.resolve({\n      data: {\n        totalTrades,\n        totalPnl,\n        winningTrades,\n        losingTrades,\n        winRate,\n        topPerformers,\n        dailyPnl,\n        avgTradeSize: totalTrades > 0 ? orders.reduce((sum, order) => sum + (order.quantity || 0), 0) / totalTrades : 0,\n        largestWin: Math.max(...orders.map(order => order.realizedPnl || 0)),\n        largestLoss: Math.min(...orders.map(order => order.realizedPnl || 0))\n      }\n    });\n  },\n\n  // Mock dashboard API\n  getDashboardData: (accountId) => {\n    const sampleData = mockApi.getSampleData();\n    const orders = sampleData?.orders || [];\n    const symbols = sampleData?.symbols || [];\n    \n    // Recent orders (last 10)\n    const recentOrders = orders\n      .sort((a, b) => new Date(b.placedAt) - new Date(a.placedAt))\n      .slice(0, 10);\n\n    // Top symbols by trades this week\n    const topSymbols = symbols\n      .sort((a, b) => b.tradesThisWeek - a.tradesThisWeek)\n      .slice(0, 5);\n\n    // Calculate summary stats\n    const todayOrders = orders.filter(order => {\n      const orderDate = new Date(order.placedAt);\n      const today = new Date();\n      return orderDate.toDateString() === today.toDateString();\n    });\n\n    const weekOrders = orders.filter(order => {\n      const orderDate = new Date(order.placedAt);\n      const weekAgo = new Date();\n      weekAgo.setDate(weekAgo.getDate() - 7);\n      return orderDate >= weekAgo;\n    });\n\n    return Promise.resolve({\n      data: {\n        recentOrders,\n        topSymbols,\n        todayStats: {\n          trades: todayOrders.length,\n          pnl: todayOrders.reduce((sum, order) => sum + (order.realizedPnl || 0), 0),\n          volume: todayOrders.reduce((sum, order) => sum + (order.quantity || 0), 0)\n        },\n        weekStats: {\n          trades: weekOrders.length,\n          pnl: weekOrders.reduce((sum, order) => sum + (order.realizedPnl || 0), 0),\n          volume: weekOrders.reduce((sum, order) => sum + (order.quantity || 0), 0)\n        }\n      }\n    });\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}