{"ast":null,"code":"var _jsxFileName = \"/Users/nsulur/dev/personal/traderview/plugin-frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Session timeout: 2 hours (in milliseconds)\n  const SESSION_TIMEOUT = 2 * 60 * 60 * 1000;\n  useEffect(() => {\n    // Check for existing session on app load\n    checkExistingSession();\n\n    // Load Google Identity Services\n    loadGoogleScript();\n  }, []);\n  const checkExistingSession = () => {\n    try {\n      const storedUser = localStorage.getItem('traderview_user');\n      const loginTime = localStorage.getItem('traderview_login_time');\n      if (storedUser && loginTime) {\n        const currentTime = new Date().getTime();\n        const timeDiff = currentTime - parseInt(loginTime);\n        if (timeDiff < SESSION_TIMEOUT) {\n          const userData = JSON.parse(storedUser);\n          setUser(userData);\n          setIsAuthenticated(true);\n\n          // Set up auto-logout timer for remaining time\n          const remainingTime = SESSION_TIMEOUT - timeDiff;\n          setTimeout(() => {\n            logout();\n          }, remainingTime);\n        } else {\n          // Session expired\n          clearSession();\n        }\n      }\n    } catch (error) {\n      console.error('Error checking existing session:', error);\n      clearSession();\n    } finally {\n      setLoading(false);\n    }\n  };\n  const loadGoogleScript = () => {\n    if (document.getElementById('google-identity-script')) {\n      return;\n    }\n    const script = document.createElement('script');\n    script.id = 'google-identity-script';\n    script.src = 'https://accounts.google.com/gsi/client';\n    script.async = true;\n    script.defer = true;\n    script.onload = initializeGoogleSignIn;\n    document.head.appendChild(script);\n  };\n  const initializeGoogleSignIn = () => {\n    if (window.google) {\n      try {\n        window.google.accounts.id.initialize({\n          client_id: process.env.REACT_APP_GOOGLE_CLIENT_ID || 'your-google-client-id',\n          callback: handleGoogleSignIn,\n          auto_select: false,\n          cancel_on_tap_outside: false\n        });\n        console.log('Google Sign-In initialized with Client ID:', process.env.REACT_APP_GOOGLE_CLIENT_ID);\n      } catch (error) {\n        console.error('Failed to initialize Google Sign-In:', error);\n      }\n    }\n  };\n  const handleGoogleSignIn = response => {\n    try {\n      // Decode the JWT token to get user info\n      const payload = JSON.parse(atob(response.credential.split('.')[1]));\n      const userData = {\n        id: payload.sub,\n        email: payload.email,\n        name: payload.name,\n        picture: payload.picture,\n        given_name: payload.given_name,\n        family_name: payload.family_name\n      };\n      const loginTime = new Date().getTime();\n\n      // Store user data and login time\n      localStorage.setItem('traderview_user', JSON.stringify(userData));\n      localStorage.setItem('traderview_login_time', loginTime.toString());\n      setUser(userData);\n      setIsAuthenticated(true);\n\n      // Set up auto-logout timer\n      setTimeout(() => {\n        logout();\n      }, SESSION_TIMEOUT);\n    } catch (error) {\n      console.error('Error handling Google sign in:', error);\n    }\n  };\n  const login = () => {\n    if (window.google) {\n      window.google.accounts.id.prompt();\n    }\n  };\n\n  // Development bypass for testing (remove in production)\n  const loginAsDeveloper = () => {\n    const devUser = {\n      id: 'dev-user-123',\n      email: 'developer@traderview.com',\n      name: 'Developer User',\n      picture: 'https://via.placeholder.com/40x40/007bff/ffffff?text=DEV',\n      given_name: 'Developer',\n      family_name: 'User'\n    };\n    const loginTime = new Date().getTime();\n\n    // Create sample data based on your CSV\n    const sampleData = createSampleData();\n\n    // Store user data and sample data\n    localStorage.setItem('traderview_user', JSON.stringify(devUser));\n    localStorage.setItem('traderview_login_time', loginTime.toString());\n    localStorage.setItem('traderview_sample_data', JSON.stringify(sampleData));\n    setUser(devUser);\n    setIsAuthenticated(true);\n    setTimeout(() => {\n      logout();\n    }, SESSION_TIMEOUT);\n  };\n  const createSampleData = () => {\n    // Sample orders based on your CSV data\n    const sampleOrders = [{\n      id: 1,\n      symbolTicker: 'AAPL',\n      side: 'BUY',\n      quantity: 100,\n      price: 150.25,\n      filledQuantity: 100,\n      avgTradesPerDay: 2.5,\n      realizedPnl: 250.75,\n      placedAt: '2025-07-25T14:30:00.000Z',\n      status: 'FILLED'\n    }, {\n      id: 2,\n      symbolTicker: 'AAPL',\n      side: 'SELL',\n      quantity: 50,\n      price: 152.80,\n      filledQuantity: 50,\n      avgTradesPerDay: 1.8,\n      realizedPnl: 127.50,\n      placedAt: '2025-07-28T10:15:00.000Z',\n      status: 'FILLED'\n    }, {\n      id: 3,\n      symbolTicker: 'MES',\n      side: 'BUY',\n      quantity: 2,\n      price: 4520.25,\n      filledQuantity: 2,\n      avgTradesPerDay: 3.2,\n      realizedPnl: -45.50,\n      placedAt: '2025-07-02T09:45:00.000Z',\n      status: 'FILLED'\n    }, {\n      id: 4,\n      symbolTicker: 'MES',\n      side: 'SELL',\n      quantity: 1,\n      price: 4535.75,\n      filledQuantity: 1,\n      avgTradesPerDay: 2.1,\n      realizedPnl: 15.50,\n      placedAt: '2025-07-02T15:20:00.000Z',\n      status: 'FILLED'\n    }, {\n      id: 5,\n      symbolTicker: 'TSLA',\n      side: 'BUY',\n      quantity: 25,\n      price: 245.60,\n      filledQuantity: 25,\n      avgTradesPerDay: 1.5,\n      realizedPnl: -32.25,\n      placedAt: '2025-07-26T11:30:00.000Z',\n      status: 'FILLED'\n    }, {\n      id: 6,\n      symbolTicker: 'NVDA',\n      side: 'BUY',\n      quantity: 10,\n      price: 425.80,\n      filledQuantity: 10,\n      avgTradesPerDay: 4.2,\n      realizedPnl: 85.40,\n      placedAt: '2025-07-27T13:45:00.000Z',\n      status: 'FILLED'\n    }];\n\n    // Generate more sample orders to test pagination\n    const additionalOrders = [];\n    const symbols = ['AAPL', 'TSLA', 'NVDA', 'MSFT', 'GOOGL', 'AMZN', 'META', 'MES', 'NQ', 'ES'];\n    const sides = ['BUY', 'SELL'];\n    const statuses = ['FILLED', 'PARTIALLY_FILLED', 'PENDING'];\n    for (let i = 7; i <= 150; i++) {\n      const symbol = symbols[Math.floor(Math.random() * symbols.length)];\n      const side = sides[Math.floor(Math.random() * sides.length)];\n      const quantity = Math.floor(Math.random() * 100) + 1;\n      const price = Math.random() * 500 + 50;\n      const filledQty = Math.floor(Math.random() * quantity);\n      const pnl = (Math.random() - 0.5) * 1000;\n      const daysAgo = Math.floor(Math.random() * 30);\n      const date = new Date();\n      date.setDate(date.getDate() - daysAgo);\n      additionalOrders.push({\n        id: i,\n        symbolTicker: symbol,\n        side: side,\n        quantity: quantity,\n        price: price,\n        filledQuantity: filledQty,\n        avgTradesPerDay: Math.random() * 5,\n        realizedPnl: pnl,\n        placedAt: date.toISOString(),\n        status: statuses[Math.floor(Math.random() * statuses.length)]\n      });\n    }\n    const allOrders = [...sampleOrders, ...additionalOrders];\n\n    // Sample symbols with weekly stats\n    const sampleSymbols = [{\n      id: 1,\n      ticker: 'AAPL',\n      name: 'Apple Inc.',\n      tradesThisWeek: 15,\n      avgPriceThisWeek: 151.25,\n      totalVolumeThisWeek: 2500,\n      weeklyPnl: 378.25\n    }, {\n      id: 2,\n      ticker: 'MES',\n      name: 'Micro E-mini S&P 500',\n      tradesThisWeek: 8,\n      avgPriceThisWeek: 4528.50,\n      totalVolumeThisWeek: 12,\n      weeklyPnl: -30.00\n    }, {\n      id: 3,\n      ticker: 'TSLA',\n      name: 'Tesla Inc.',\n      tradesThisWeek: 5,\n      avgPriceThisWeek: 248.75,\n      totalVolumeThisWeek: 125,\n      weeklyPnl: -32.25\n    }, {\n      id: 4,\n      ticker: 'NVDA',\n      name: 'NVIDIA Corporation',\n      tradesThisWeek: 12,\n      avgPriceThisWeek: 428.90,\n      totalVolumeThisWeek: 180,\n      weeklyPnl: 245.80\n    }];\n\n    // Generate more symbols for pagination testing\n    const additionalSymbols = [];\n    const symbolNames = [{\n      ticker: 'MSFT',\n      name: 'Microsoft Corporation'\n    }, {\n      ticker: 'GOOGL',\n      name: 'Alphabet Inc.'\n    }, {\n      ticker: 'AMZN',\n      name: 'Amazon.com Inc.'\n    }, {\n      ticker: 'META',\n      name: 'Meta Platforms Inc.'\n    }, {\n      ticker: 'NQ',\n      name: 'Micro E-mini NASDAQ-100'\n    }, {\n      ticker: 'ES',\n      name: 'E-mini S&P 500'\n    }, {\n      ticker: 'AMD',\n      name: 'Advanced Micro Devices'\n    }, {\n      ticker: 'NFLX',\n      name: 'Netflix Inc.'\n    }, {\n      ticker: 'CRM',\n      name: 'Salesforce Inc.'\n    }, {\n      ticker: 'ADBE',\n      name: 'Adobe Inc.'\n    }];\n    symbolNames.forEach((symbol, index) => {\n      additionalSymbols.push({\n        id: index + 5,\n        ticker: symbol.ticker,\n        name: symbol.name,\n        tradesThisWeek: Math.floor(Math.random() * 20) + 1,\n        avgPriceThisWeek: Math.random() * 400 + 50,\n        totalVolumeThisWeek: Math.floor(Math.random() * 1000) + 50,\n        weeklyPnl: (Math.random() - 0.5) * 500\n      });\n    });\n    const allSymbols = [...sampleSymbols, ...additionalSymbols];\n    return {\n      orders: allOrders,\n      symbols: allSymbols,\n      accounts: [{\n        id: 1,\n        accountName: 'Main Trading Account',\n        accountNumber: 'DU123456',\n        brokerName: 'Interactive Brokers',\n        brokerId: 1,\n        isActive: true\n      }, {\n        id: 2,\n        accountName: 'Futures Account',\n        accountNumber: 'DU789012',\n        brokerName: 'TD Ameritrade',\n        brokerId: 2,\n        isActive: true\n      }],\n      brokers: [{\n        id: 1,\n        name: 'interactive_brokers',\n        displayName: 'Interactive Brokers',\n        apiEndpoint: 'https://api.interactivebrokers.com',\n        isActive: true\n      }, {\n        id: 2,\n        name: 'td_ameritrade',\n        displayName: 'TD Ameritrade',\n        apiEndpoint: 'https://api.tdameritrade.com',\n        isActive: true\n      }]\n    };\n  };\n  const logout = () => {\n    // Sign out from Google\n    if (window.google) {\n      window.google.accounts.id.disableAutoSelect();\n    }\n    clearSession();\n  };\n  const clearSession = () => {\n    localStorage.removeItem('traderview_user');\n    localStorage.removeItem('traderview_login_time');\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    logout,\n    loginAsDeveloper // Development only\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 404,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"xBgiRagNfQVCfEr2dT2PptfN+TE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","SESSION_TIMEOUT","checkExistingSession","loadGoogleScript","storedUser","localStorage","getItem","loginTime","currentTime","Date","getTime","timeDiff","parseInt","userData","JSON","parse","remainingTime","setTimeout","logout","clearSession","error","console","document","getElementById","script","createElement","id","src","async","defer","onload","initializeGoogleSignIn","head","appendChild","window","google","accounts","initialize","client_id","process","env","REACT_APP_GOOGLE_CLIENT_ID","callback","handleGoogleSignIn","auto_select","cancel_on_tap_outside","log","response","payload","atob","credential","split","sub","email","name","picture","given_name","family_name","setItem","stringify","toString","login","prompt","loginAsDeveloper","devUser","sampleData","createSampleData","sampleOrders","symbolTicker","side","quantity","price","filledQuantity","avgTradesPerDay","realizedPnl","placedAt","status","additionalOrders","symbols","sides","statuses","i","symbol","Math","floor","random","length","filledQty","pnl","daysAgo","date","setDate","getDate","push","toISOString","allOrders","sampleSymbols","ticker","tradesThisWeek","avgPriceThisWeek","totalVolumeThisWeek","weeklyPnl","additionalSymbols","symbolNames","forEach","index","allSymbols","orders","accountName","accountNumber","brokerName","brokerId","isActive","brokers","displayName","apiEndpoint","disableAutoSelect","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nsulur/dev/personal/traderview/plugin-frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Session timeout: 2 hours (in milliseconds)\n  const SESSION_TIMEOUT = 2 * 60 * 60 * 1000;\n\n  useEffect(() => {\n    // Check for existing session on app load\n    checkExistingSession();\n    \n    // Load Google Identity Services\n    loadGoogleScript();\n  }, []);\n\n  const checkExistingSession = () => {\n    try {\n      const storedUser = localStorage.getItem('traderview_user');\n      const loginTime = localStorage.getItem('traderview_login_time');\n      \n      if (storedUser && loginTime) {\n        const currentTime = new Date().getTime();\n        const timeDiff = currentTime - parseInt(loginTime);\n        \n        if (timeDiff < SESSION_TIMEOUT) {\n          const userData = JSON.parse(storedUser);\n          setUser(userData);\n          setIsAuthenticated(true);\n          \n          // Set up auto-logout timer for remaining time\n          const remainingTime = SESSION_TIMEOUT - timeDiff;\n          setTimeout(() => {\n            logout();\n          }, remainingTime);\n        } else {\n          // Session expired\n          clearSession();\n        }\n      }\n    } catch (error) {\n      console.error('Error checking existing session:', error);\n      clearSession();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadGoogleScript = () => {\n    if (document.getElementById('google-identity-script')) {\n      return;\n    }\n\n    const script = document.createElement('script');\n    script.id = 'google-identity-script';\n    script.src = 'https://accounts.google.com/gsi/client';\n    script.async = true;\n    script.defer = true;\n    script.onload = initializeGoogleSignIn;\n    document.head.appendChild(script);\n  };\n\n  const initializeGoogleSignIn = () => {\n    if (window.google) {\n      try {\n        window.google.accounts.id.initialize({\n          client_id: process.env.REACT_APP_GOOGLE_CLIENT_ID || 'your-google-client-id',\n          callback: handleGoogleSignIn,\n          auto_select: false,\n          cancel_on_tap_outside: false,\n        });\n        console.log('Google Sign-In initialized with Client ID:', process.env.REACT_APP_GOOGLE_CLIENT_ID);\n      } catch (error) {\n        console.error('Failed to initialize Google Sign-In:', error);\n      }\n    }\n  };\n\n  const handleGoogleSignIn = (response) => {\n    try {\n      // Decode the JWT token to get user info\n      const payload = JSON.parse(atob(response.credential.split('.')[1]));\n      \n      const userData = {\n        id: payload.sub,\n        email: payload.email,\n        name: payload.name,\n        picture: payload.picture,\n        given_name: payload.given_name,\n        family_name: payload.family_name,\n      };\n\n      const loginTime = new Date().getTime();\n      \n      // Store user data and login time\n      localStorage.setItem('traderview_user', JSON.stringify(userData));\n      localStorage.setItem('traderview_login_time', loginTime.toString());\n      \n      setUser(userData);\n      setIsAuthenticated(true);\n      \n      // Set up auto-logout timer\n      setTimeout(() => {\n        logout();\n      }, SESSION_TIMEOUT);\n      \n    } catch (error) {\n      console.error('Error handling Google sign in:', error);\n    }\n  };\n\n  const login = () => {\n    if (window.google) {\n      window.google.accounts.id.prompt();\n    }\n  };\n\n  // Development bypass for testing (remove in production)\n  const loginAsDeveloper = () => {\n    const devUser = {\n      id: 'dev-user-123',\n      email: 'developer@traderview.com',\n      name: 'Developer User',\n      picture: 'https://via.placeholder.com/40x40/007bff/ffffff?text=DEV',\n      given_name: 'Developer',\n      family_name: 'User',\n    };\n\n    const loginTime = new Date().getTime();\n\n    // Create sample data based on your CSV\n    const sampleData = createSampleData();\n\n    // Store user data and sample data\n    localStorage.setItem('traderview_user', JSON.stringify(devUser));\n    localStorage.setItem('traderview_login_time', loginTime.toString());\n    localStorage.setItem('traderview_sample_data', JSON.stringify(sampleData));\n\n    setUser(devUser);\n    setIsAuthenticated(true);\n\n    setTimeout(() => {\n      logout();\n    }, SESSION_TIMEOUT);\n  };\n\n  const createSampleData = () => {\n    // Sample orders based on your CSV data\n    const sampleOrders = [\n      {\n        id: 1,\n        symbolTicker: 'AAPL',\n        side: 'BUY',\n        quantity: 100,\n        price: 150.25,\n        filledQuantity: 100,\n        avgTradesPerDay: 2.5,\n        realizedPnl: 250.75,\n        placedAt: '2025-07-25T14:30:00.000Z',\n        status: 'FILLED'\n      },\n      {\n        id: 2,\n        symbolTicker: 'AAPL',\n        side: 'SELL',\n        quantity: 50,\n        price: 152.80,\n        filledQuantity: 50,\n        avgTradesPerDay: 1.8,\n        realizedPnl: 127.50,\n        placedAt: '2025-07-28T10:15:00.000Z',\n        status: 'FILLED'\n      },\n      {\n        id: 3,\n        symbolTicker: 'MES',\n        side: 'BUY',\n        quantity: 2,\n        price: 4520.25,\n        filledQuantity: 2,\n        avgTradesPerDay: 3.2,\n        realizedPnl: -45.50,\n        placedAt: '2025-07-02T09:45:00.000Z',\n        status: 'FILLED'\n      },\n      {\n        id: 4,\n        symbolTicker: 'MES',\n        side: 'SELL',\n        quantity: 1,\n        price: 4535.75,\n        filledQuantity: 1,\n        avgTradesPerDay: 2.1,\n        realizedPnl: 15.50,\n        placedAt: '2025-07-02T15:20:00.000Z',\n        status: 'FILLED'\n      },\n      {\n        id: 5,\n        symbolTicker: 'TSLA',\n        side: 'BUY',\n        quantity: 25,\n        price: 245.60,\n        filledQuantity: 25,\n        avgTradesPerDay: 1.5,\n        realizedPnl: -32.25,\n        placedAt: '2025-07-26T11:30:00.000Z',\n        status: 'FILLED'\n      },\n      {\n        id: 6,\n        symbolTicker: 'NVDA',\n        side: 'BUY',\n        quantity: 10,\n        price: 425.80,\n        filledQuantity: 10,\n        avgTradesPerDay: 4.2,\n        realizedPnl: 85.40,\n        placedAt: '2025-07-27T13:45:00.000Z',\n        status: 'FILLED'\n      }\n    ];\n\n    // Generate more sample orders to test pagination\n    const additionalOrders = [];\n    const symbols = ['AAPL', 'TSLA', 'NVDA', 'MSFT', 'GOOGL', 'AMZN', 'META', 'MES', 'NQ', 'ES'];\n    const sides = ['BUY', 'SELL'];\n    const statuses = ['FILLED', 'PARTIALLY_FILLED', 'PENDING'];\n\n    for (let i = 7; i <= 150; i++) {\n      const symbol = symbols[Math.floor(Math.random() * symbols.length)];\n      const side = sides[Math.floor(Math.random() * sides.length)];\n      const quantity = Math.floor(Math.random() * 100) + 1;\n      const price = Math.random() * 500 + 50;\n      const filledQty = Math.floor(Math.random() * quantity);\n      const pnl = (Math.random() - 0.5) * 1000;\n      const daysAgo = Math.floor(Math.random() * 30);\n      const date = new Date();\n      date.setDate(date.getDate() - daysAgo);\n\n      additionalOrders.push({\n        id: i,\n        symbolTicker: symbol,\n        side: side,\n        quantity: quantity,\n        price: price,\n        filledQuantity: filledQty,\n        avgTradesPerDay: Math.random() * 5,\n        realizedPnl: pnl,\n        placedAt: date.toISOString(),\n        status: statuses[Math.floor(Math.random() * statuses.length)]\n      });\n    }\n\n    const allOrders = [...sampleOrders, ...additionalOrders];\n\n    // Sample symbols with weekly stats\n    const sampleSymbols = [\n      {\n        id: 1,\n        ticker: 'AAPL',\n        name: 'Apple Inc.',\n        tradesThisWeek: 15,\n        avgPriceThisWeek: 151.25,\n        totalVolumeThisWeek: 2500,\n        weeklyPnl: 378.25\n      },\n      {\n        id: 2,\n        ticker: 'MES',\n        name: 'Micro E-mini S&P 500',\n        tradesThisWeek: 8,\n        avgPriceThisWeek: 4528.50,\n        totalVolumeThisWeek: 12,\n        weeklyPnl: -30.00\n      },\n      {\n        id: 3,\n        ticker: 'TSLA',\n        name: 'Tesla Inc.',\n        tradesThisWeek: 5,\n        avgPriceThisWeek: 248.75,\n        totalVolumeThisWeek: 125,\n        weeklyPnl: -32.25\n      },\n      {\n        id: 4,\n        ticker: 'NVDA',\n        name: 'NVIDIA Corporation',\n        tradesThisWeek: 12,\n        avgPriceThisWeek: 428.90,\n        totalVolumeThisWeek: 180,\n        weeklyPnl: 245.80\n      }\n    ];\n\n    // Generate more symbols for pagination testing\n    const additionalSymbols = [];\n    const symbolNames = [\n      { ticker: 'MSFT', name: 'Microsoft Corporation' },\n      { ticker: 'GOOGL', name: 'Alphabet Inc.' },\n      { ticker: 'AMZN', name: 'Amazon.com Inc.' },\n      { ticker: 'META', name: 'Meta Platforms Inc.' },\n      { ticker: 'NQ', name: 'Micro E-mini NASDAQ-100' },\n      { ticker: 'ES', name: 'E-mini S&P 500' },\n      { ticker: 'AMD', name: 'Advanced Micro Devices' },\n      { ticker: 'NFLX', name: 'Netflix Inc.' },\n      { ticker: 'CRM', name: 'Salesforce Inc.' },\n      { ticker: 'ADBE', name: 'Adobe Inc.' }\n    ];\n\n    symbolNames.forEach((symbol, index) => {\n      additionalSymbols.push({\n        id: index + 5,\n        ticker: symbol.ticker,\n        name: symbol.name,\n        tradesThisWeek: Math.floor(Math.random() * 20) + 1,\n        avgPriceThisWeek: Math.random() * 400 + 50,\n        totalVolumeThisWeek: Math.floor(Math.random() * 1000) + 50,\n        weeklyPnl: (Math.random() - 0.5) * 500\n      });\n    });\n\n    const allSymbols = [...sampleSymbols, ...additionalSymbols];\n\n    return {\n      orders: allOrders,\n      symbols: allSymbols,\n      accounts: [\n        {\n          id: 1,\n          accountName: 'Main Trading Account',\n          accountNumber: 'DU123456',\n          brokerName: 'Interactive Brokers',\n          brokerId: 1,\n          isActive: true\n        },\n        {\n          id: 2,\n          accountName: 'Futures Account',\n          accountNumber: 'DU789012',\n          brokerName: 'TD Ameritrade',\n          brokerId: 2,\n          isActive: true\n        }\n      ],\n      brokers: [\n        {\n          id: 1,\n          name: 'interactive_brokers',\n          displayName: 'Interactive Brokers',\n          apiEndpoint: 'https://api.interactivebrokers.com',\n          isActive: true\n        },\n        {\n          id: 2,\n          name: 'td_ameritrade',\n          displayName: 'TD Ameritrade',\n          apiEndpoint: 'https://api.tdameritrade.com',\n          isActive: true\n        }\n      ]\n    };\n  };\n\n  const logout = () => {\n    // Sign out from Google\n    if (window.google) {\n      window.google.accounts.id.disableAutoSelect();\n    }\n    \n    clearSession();\n  };\n\n  const clearSession = () => {\n    localStorage.removeItem('traderview_user');\n    localStorage.removeItem('traderview_login_time');\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    logout,\n    loginAsDeveloper, // Development only\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGR,UAAU,CAACK,WAAW,CAAC;EACvC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAQpB,OAAO,MAAMI,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACgB,eAAe,EAAEC,kBAAkB,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;;EAE7D;EACA,MAAMkB,eAAe,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;EAE1CjB,SAAS,CAAC,MAAM;IACd;IACAkB,oBAAoB,CAAC,CAAC;;IAEtB;IACAC,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMD,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAI;MACF,MAAME,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;MAC1D,MAAMC,SAAS,GAAGF,YAAY,CAACC,OAAO,CAAC,uBAAuB,CAAC;MAE/D,IAAIF,UAAU,IAAIG,SAAS,EAAE;QAC3B,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;QACxC,MAAMC,QAAQ,GAAGH,WAAW,GAAGI,QAAQ,CAACL,SAAS,CAAC;QAElD,IAAII,QAAQ,GAAGV,eAAe,EAAE;UAC9B,MAAMY,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACX,UAAU,CAAC;UACvCR,OAAO,CAACiB,QAAQ,CAAC;UACjBb,kBAAkB,CAAC,IAAI,CAAC;;UAExB;UACA,MAAMgB,aAAa,GAAGf,eAAe,GAAGU,QAAQ;UAChDM,UAAU,CAAC,MAAM;YACfC,MAAM,CAAC,CAAC;UACV,CAAC,EAAEF,aAAa,CAAC;QACnB,CAAC,MAAM;UACL;UACAG,YAAY,CAAC,CAAC;QAChB;MACF;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxDD,YAAY,CAAC,CAAC;IAChB,CAAC,SAAS;MACRrB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,MAAMK,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAImB,QAAQ,CAACC,cAAc,CAAC,wBAAwB,CAAC,EAAE;MACrD;IACF;IAEA,MAAMC,MAAM,GAAGF,QAAQ,CAACG,aAAa,CAAC,QAAQ,CAAC;IAC/CD,MAAM,CAACE,EAAE,GAAG,wBAAwB;IACpCF,MAAM,CAACG,GAAG,GAAG,wCAAwC;IACrDH,MAAM,CAACI,KAAK,GAAG,IAAI;IACnBJ,MAAM,CAACK,KAAK,GAAG,IAAI;IACnBL,MAAM,CAACM,MAAM,GAAGC,sBAAsB;IACtCT,QAAQ,CAACU,IAAI,CAACC,WAAW,CAACT,MAAM,CAAC;EACnC,CAAC;EAED,MAAMO,sBAAsB,GAAGA,CAAA,KAAM;IACnC,IAAIG,MAAM,CAACC,MAAM,EAAE;MACjB,IAAI;QACFD,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACV,EAAE,CAACW,UAAU,CAAC;UACnCC,SAAS,EAAEC,OAAO,CAACC,GAAG,CAACC,0BAA0B,IAAI,uBAAuB;UAC5EC,QAAQ,EAAEC,kBAAkB;UAC5BC,WAAW,EAAE,KAAK;UAClBC,qBAAqB,EAAE;QACzB,CAAC,CAAC;QACFxB,OAAO,CAACyB,GAAG,CAAC,4CAA4C,EAAEP,OAAO,CAACC,GAAG,CAACC,0BAA0B,CAAC;MACnG,CAAC,CAAC,OAAOrB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC9D;IACF;EACF,CAAC;EAED,MAAMuB,kBAAkB,GAAII,QAAQ,IAAK;IACvC,IAAI;MACF;MACA,MAAMC,OAAO,GAAGlC,IAAI,CAACC,KAAK,CAACkC,IAAI,CAACF,QAAQ,CAACG,UAAU,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MAEnE,MAAMtC,QAAQ,GAAG;QACfa,EAAE,EAAEsB,OAAO,CAACI,GAAG;QACfC,KAAK,EAAEL,OAAO,CAACK,KAAK;QACpBC,IAAI,EAAEN,OAAO,CAACM,IAAI;QAClBC,OAAO,EAAEP,OAAO,CAACO,OAAO;QACxBC,UAAU,EAAER,OAAO,CAACQ,UAAU;QAC9BC,WAAW,EAAET,OAAO,CAACS;MACvB,CAAC;MAED,MAAMlD,SAAS,GAAG,IAAIE,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;;MAEtC;MACAL,YAAY,CAACqD,OAAO,CAAC,iBAAiB,EAAE5C,IAAI,CAAC6C,SAAS,CAAC9C,QAAQ,CAAC,CAAC;MACjER,YAAY,CAACqD,OAAO,CAAC,uBAAuB,EAAEnD,SAAS,CAACqD,QAAQ,CAAC,CAAC,CAAC;MAEnEhE,OAAO,CAACiB,QAAQ,CAAC;MACjBb,kBAAkB,CAAC,IAAI,CAAC;;MAExB;MACAiB,UAAU,CAAC,MAAM;QACfC,MAAM,CAAC,CAAC;MACV,CAAC,EAAEjB,eAAe,CAAC;IAErB,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;IACxD;EACF,CAAC;EAED,MAAMyC,KAAK,GAAGA,CAAA,KAAM;IAClB,IAAI3B,MAAM,CAACC,MAAM,EAAE;MACjBD,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACV,EAAE,CAACoC,MAAM,CAAC,CAAC;IACpC;EACF,CAAC;;EAED;EACA,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,MAAMC,OAAO,GAAG;MACdtC,EAAE,EAAE,cAAc;MAClB2B,KAAK,EAAE,0BAA0B;MACjCC,IAAI,EAAE,gBAAgB;MACtBC,OAAO,EAAE,0DAA0D;MACnEC,UAAU,EAAE,WAAW;MACvBC,WAAW,EAAE;IACf,CAAC;IAED,MAAMlD,SAAS,GAAG,IAAIE,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;;IAEtC;IACA,MAAMuD,UAAU,GAAGC,gBAAgB,CAAC,CAAC;;IAErC;IACA7D,YAAY,CAACqD,OAAO,CAAC,iBAAiB,EAAE5C,IAAI,CAAC6C,SAAS,CAACK,OAAO,CAAC,CAAC;IAChE3D,YAAY,CAACqD,OAAO,CAAC,uBAAuB,EAAEnD,SAAS,CAACqD,QAAQ,CAAC,CAAC,CAAC;IACnEvD,YAAY,CAACqD,OAAO,CAAC,wBAAwB,EAAE5C,IAAI,CAAC6C,SAAS,CAACM,UAAU,CAAC,CAAC;IAE1ErE,OAAO,CAACoE,OAAO,CAAC;IAChBhE,kBAAkB,CAAC,IAAI,CAAC;IAExBiB,UAAU,CAAC,MAAM;MACfC,MAAM,CAAC,CAAC;IACV,CAAC,EAAEjB,eAAe,CAAC;EACrB,CAAC;EAED,MAAMiE,gBAAgB,GAAGA,CAAA,KAAM;IAC7B;IACA,MAAMC,YAAY,GAAG,CACnB;MACEzC,EAAE,EAAE,CAAC;MACL0C,YAAY,EAAE,MAAM;MACpBC,IAAI,EAAE,KAAK;MACXC,QAAQ,EAAE,GAAG;MACbC,KAAK,EAAE,MAAM;MACbC,cAAc,EAAE,GAAG;MACnBC,eAAe,EAAE,GAAG;MACpBC,WAAW,EAAE,MAAM;MACnBC,QAAQ,EAAE,0BAA0B;MACpCC,MAAM,EAAE;IACV,CAAC,EACD;MACElD,EAAE,EAAE,CAAC;MACL0C,YAAY,EAAE,MAAM;MACpBC,IAAI,EAAE,MAAM;MACZC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,MAAM;MACbC,cAAc,EAAE,EAAE;MAClBC,eAAe,EAAE,GAAG;MACpBC,WAAW,EAAE,MAAM;MACnBC,QAAQ,EAAE,0BAA0B;MACpCC,MAAM,EAAE;IACV,CAAC,EACD;MACElD,EAAE,EAAE,CAAC;MACL0C,YAAY,EAAE,KAAK;MACnBC,IAAI,EAAE,KAAK;MACXC,QAAQ,EAAE,CAAC;MACXC,KAAK,EAAE,OAAO;MACdC,cAAc,EAAE,CAAC;MACjBC,eAAe,EAAE,GAAG;MACpBC,WAAW,EAAE,CAAC,KAAK;MACnBC,QAAQ,EAAE,0BAA0B;MACpCC,MAAM,EAAE;IACV,CAAC,EACD;MACElD,EAAE,EAAE,CAAC;MACL0C,YAAY,EAAE,KAAK;MACnBC,IAAI,EAAE,MAAM;MACZC,QAAQ,EAAE,CAAC;MACXC,KAAK,EAAE,OAAO;MACdC,cAAc,EAAE,CAAC;MACjBC,eAAe,EAAE,GAAG;MACpBC,WAAW,EAAE,KAAK;MAClBC,QAAQ,EAAE,0BAA0B;MACpCC,MAAM,EAAE;IACV,CAAC,EACD;MACElD,EAAE,EAAE,CAAC;MACL0C,YAAY,EAAE,MAAM;MACpBC,IAAI,EAAE,KAAK;MACXC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,MAAM;MACbC,cAAc,EAAE,EAAE;MAClBC,eAAe,EAAE,GAAG;MACpBC,WAAW,EAAE,CAAC,KAAK;MACnBC,QAAQ,EAAE,0BAA0B;MACpCC,MAAM,EAAE;IACV,CAAC,EACD;MACElD,EAAE,EAAE,CAAC;MACL0C,YAAY,EAAE,MAAM;MACpBC,IAAI,EAAE,KAAK;MACXC,QAAQ,EAAE,EAAE;MACZC,KAAK,EAAE,MAAM;MACbC,cAAc,EAAE,EAAE;MAClBC,eAAe,EAAE,GAAG;MACpBC,WAAW,EAAE,KAAK;MAClBC,QAAQ,EAAE,0BAA0B;MACpCC,MAAM,EAAE;IACV,CAAC,CACF;;IAED;IACA,MAAMC,gBAAgB,GAAG,EAAE;IAC3B,MAAMC,OAAO,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC;IAC5F,MAAMC,KAAK,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC;IAC7B,MAAMC,QAAQ,GAAG,CAAC,QAAQ,EAAE,kBAAkB,EAAE,SAAS,CAAC;IAE1D,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,GAAG,EAAEA,CAAC,EAAE,EAAE;MAC7B,MAAMC,MAAM,GAAGJ,OAAO,CAACK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGP,OAAO,CAACQ,MAAM,CAAC,CAAC;MAClE,MAAMjB,IAAI,GAAGU,KAAK,CAACI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,KAAK,CAACO,MAAM,CAAC,CAAC;MAC5D,MAAMhB,QAAQ,GAAGa,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC;MACpD,MAAMd,KAAK,GAAGY,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE;MACtC,MAAME,SAAS,GAAGJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGf,QAAQ,CAAC;MACtD,MAAMkB,GAAG,GAAG,CAACL,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,IAAI;MACxC,MAAMI,OAAO,GAAGN,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC;MAC9C,MAAMK,IAAI,GAAG,IAAIjF,IAAI,CAAC,CAAC;MACvBiF,IAAI,CAACC,OAAO,CAACD,IAAI,CAACE,OAAO,CAAC,CAAC,GAAGH,OAAO,CAAC;MAEtCZ,gBAAgB,CAACgB,IAAI,CAAC;QACpBnE,EAAE,EAAEuD,CAAC;QACLb,YAAY,EAAEc,MAAM;QACpBb,IAAI,EAAEA,IAAI;QACVC,QAAQ,EAAEA,QAAQ;QAClBC,KAAK,EAAEA,KAAK;QACZC,cAAc,EAAEe,SAAS;QACzBd,eAAe,EAAEU,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,CAAC;QAClCX,WAAW,EAAEc,GAAG;QAChBb,QAAQ,EAAEe,IAAI,CAACI,WAAW,CAAC,CAAC;QAC5BlB,MAAM,EAAEI,QAAQ,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGL,QAAQ,CAACM,MAAM,CAAC;MAC9D,CAAC,CAAC;IACJ;IAEA,MAAMS,SAAS,GAAG,CAAC,GAAG5B,YAAY,EAAE,GAAGU,gBAAgB,CAAC;;IAExD;IACA,MAAMmB,aAAa,GAAG,CACpB;MACEtE,EAAE,EAAE,CAAC;MACLuE,MAAM,EAAE,MAAM;MACd3C,IAAI,EAAE,YAAY;MAClB4C,cAAc,EAAE,EAAE;MAClBC,gBAAgB,EAAE,MAAM;MACxBC,mBAAmB,EAAE,IAAI;MACzBC,SAAS,EAAE;IACb,CAAC,EACD;MACE3E,EAAE,EAAE,CAAC;MACLuE,MAAM,EAAE,KAAK;MACb3C,IAAI,EAAE,sBAAsB;MAC5B4C,cAAc,EAAE,CAAC;MACjBC,gBAAgB,EAAE,OAAO;MACzBC,mBAAmB,EAAE,EAAE;MACvBC,SAAS,EAAE,CAAC;IACd,CAAC,EACD;MACE3E,EAAE,EAAE,CAAC;MACLuE,MAAM,EAAE,MAAM;MACd3C,IAAI,EAAE,YAAY;MAClB4C,cAAc,EAAE,CAAC;MACjBC,gBAAgB,EAAE,MAAM;MACxBC,mBAAmB,EAAE,GAAG;MACxBC,SAAS,EAAE,CAAC;IACd,CAAC,EACD;MACE3E,EAAE,EAAE,CAAC;MACLuE,MAAM,EAAE,MAAM;MACd3C,IAAI,EAAE,oBAAoB;MAC1B4C,cAAc,EAAE,EAAE;MAClBC,gBAAgB,EAAE,MAAM;MACxBC,mBAAmB,EAAE,GAAG;MACxBC,SAAS,EAAE;IACb,CAAC,CACF;;IAED;IACA,MAAMC,iBAAiB,GAAG,EAAE;IAC5B,MAAMC,WAAW,GAAG,CAClB;MAAEN,MAAM,EAAE,MAAM;MAAE3C,IAAI,EAAE;IAAwB,CAAC,EACjD;MAAE2C,MAAM,EAAE,OAAO;MAAE3C,IAAI,EAAE;IAAgB,CAAC,EAC1C;MAAE2C,MAAM,EAAE,MAAM;MAAE3C,IAAI,EAAE;IAAkB,CAAC,EAC3C;MAAE2C,MAAM,EAAE,MAAM;MAAE3C,IAAI,EAAE;IAAsB,CAAC,EAC/C;MAAE2C,MAAM,EAAE,IAAI;MAAE3C,IAAI,EAAE;IAA0B,CAAC,EACjD;MAAE2C,MAAM,EAAE,IAAI;MAAE3C,IAAI,EAAE;IAAiB,CAAC,EACxC;MAAE2C,MAAM,EAAE,KAAK;MAAE3C,IAAI,EAAE;IAAyB,CAAC,EACjD;MAAE2C,MAAM,EAAE,MAAM;MAAE3C,IAAI,EAAE;IAAe,CAAC,EACxC;MAAE2C,MAAM,EAAE,KAAK;MAAE3C,IAAI,EAAE;IAAkB,CAAC,EAC1C;MAAE2C,MAAM,EAAE,MAAM;MAAE3C,IAAI,EAAE;IAAa,CAAC,CACvC;IAEDiD,WAAW,CAACC,OAAO,CAAC,CAACtB,MAAM,EAAEuB,KAAK,KAAK;MACrCH,iBAAiB,CAACT,IAAI,CAAC;QACrBnE,EAAE,EAAE+E,KAAK,GAAG,CAAC;QACbR,MAAM,EAAEf,MAAM,CAACe,MAAM;QACrB3C,IAAI,EAAE4B,MAAM,CAAC5B,IAAI;QACjB4C,cAAc,EAAEf,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG,CAAC;QAClDc,gBAAgB,EAAEhB,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,EAAE;QAC1Ce,mBAAmB,EAAEjB,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,EAAE;QAC1DgB,SAAS,EAAE,CAAClB,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI;MACrC,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,MAAMqB,UAAU,GAAG,CAAC,GAAGV,aAAa,EAAE,GAAGM,iBAAiB,CAAC;IAE3D,OAAO;MACLK,MAAM,EAAEZ,SAAS;MACjBjB,OAAO,EAAE4B,UAAU;MACnBtE,QAAQ,EAAE,CACR;QACEV,EAAE,EAAE,CAAC;QACLkF,WAAW,EAAE,sBAAsB;QACnCC,aAAa,EAAE,UAAU;QACzBC,UAAU,EAAE,qBAAqB;QACjCC,QAAQ,EAAE,CAAC;QACXC,QAAQ,EAAE;MACZ,CAAC,EACD;QACEtF,EAAE,EAAE,CAAC;QACLkF,WAAW,EAAE,iBAAiB;QAC9BC,aAAa,EAAE,UAAU;QACzBC,UAAU,EAAE,eAAe;QAC3BC,QAAQ,EAAE,CAAC;QACXC,QAAQ,EAAE;MACZ,CAAC,CACF;MACDC,OAAO,EAAE,CACP;QACEvF,EAAE,EAAE,CAAC;QACL4B,IAAI,EAAE,qBAAqB;QAC3B4D,WAAW,EAAE,qBAAqB;QAClCC,WAAW,EAAE,oCAAoC;QACjDH,QAAQ,EAAE;MACZ,CAAC,EACD;QACEtF,EAAE,EAAE,CAAC;QACL4B,IAAI,EAAE,eAAe;QACrB4D,WAAW,EAAE,eAAe;QAC5BC,WAAW,EAAE,8BAA8B;QAC3CH,QAAQ,EAAE;MACZ,CAAC;IAEL,CAAC;EACH,CAAC;EAED,MAAM9F,MAAM,GAAGA,CAAA,KAAM;IACnB;IACA,IAAIgB,MAAM,CAACC,MAAM,EAAE;MACjBD,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACV,EAAE,CAAC0F,iBAAiB,CAAC,CAAC;IAC/C;IAEAjG,YAAY,CAAC,CAAC;EAChB,CAAC;EAED,MAAMA,YAAY,GAAGA,CAAA,KAAM;IACzBd,YAAY,CAACgH,UAAU,CAAC,iBAAiB,CAAC;IAC1ChH,YAAY,CAACgH,UAAU,CAAC,uBAAuB,CAAC;IAChDzH,OAAO,CAAC,IAAI,CAAC;IACbI,kBAAkB,CAAC,KAAK,CAAC;EAC3B,CAAC;EAED,MAAMsH,KAAK,GAAG;IACZ3H,IAAI;IACJI,eAAe;IACfF,OAAO;IACPgE,KAAK;IACL3C,MAAM;IACN6C,gBAAgB,CAAE;EACpB,CAAC;EAED,oBACE7E,OAAA,CAACC,WAAW,CAACoI,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAA7H,QAAA,EAChCA;EAAQ;IAAA+H,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACjI,GAAA,CA3YWF,YAAY;AAAAoI,EAAA,GAAZpI,YAAY;AAAA,IAAAoI,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}