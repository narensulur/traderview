{"ast":null,"code":"var _jsxFileName = \"/Users/nsulur/dev/personal/traderview/plugin-frontend/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Session timeout: 2 hours (in milliseconds)\n  const SESSION_TIMEOUT = 2 * 60 * 60 * 1000;\n  useEffect(() => {\n    // Check for existing session on app load\n    checkExistingSession();\n\n    // Load Google Identity Services\n    loadGoogleScript();\n  }, []);\n  const checkExistingSession = () => {\n    try {\n      const storedUser = localStorage.getItem('traderview_user');\n      const loginTime = localStorage.getItem('traderview_login_time');\n      if (storedUser && loginTime) {\n        const currentTime = new Date().getTime();\n        const timeDiff = currentTime - parseInt(loginTime);\n        if (timeDiff < SESSION_TIMEOUT) {\n          const userData = JSON.parse(storedUser);\n          setUser(userData);\n          setIsAuthenticated(true);\n\n          // Set up auto-logout timer for remaining time\n          const remainingTime = SESSION_TIMEOUT - timeDiff;\n          setTimeout(() => {\n            logout();\n          }, remainingTime);\n        } else {\n          // Session expired\n          clearSession();\n        }\n      }\n    } catch (error) {\n      console.error('Error checking existing session:', error);\n      clearSession();\n    } finally {\n      setLoading(false);\n    }\n  };\n  const loadGoogleScript = () => {\n    if (document.getElementById('google-identity-script')) {\n      return;\n    }\n    const script = document.createElement('script');\n    script.id = 'google-identity-script';\n    script.src = 'https://accounts.google.com/gsi/client';\n    script.async = true;\n    script.defer = true;\n    script.onload = initializeGoogleSignIn;\n    document.head.appendChild(script);\n  };\n  const initializeGoogleSignIn = () => {\n    if (window.google) {\n      window.google.accounts.id.initialize({\n        client_id: process.env.REACT_APP_GOOGLE_CLIENT_ID || 'your-google-client-id',\n        callback: handleGoogleSignIn,\n        auto_select: false,\n        cancel_on_tap_outside: false\n      });\n    }\n  };\n  const handleGoogleSignIn = response => {\n    try {\n      // Decode the JWT token to get user info\n      const payload = JSON.parse(atob(response.credential.split('.')[1]));\n      const userData = {\n        id: payload.sub,\n        email: payload.email,\n        name: payload.name,\n        picture: payload.picture,\n        given_name: payload.given_name,\n        family_name: payload.family_name\n      };\n      const loginTime = new Date().getTime();\n\n      // Store user data and login time\n      localStorage.setItem('traderview_user', JSON.stringify(userData));\n      localStorage.setItem('traderview_login_time', loginTime.toString());\n      setUser(userData);\n      setIsAuthenticated(true);\n\n      // Set up auto-logout timer\n      setTimeout(() => {\n        logout();\n      }, SESSION_TIMEOUT);\n    } catch (error) {\n      console.error('Error handling Google sign in:', error);\n    }\n  };\n  const login = () => {\n    if (window.google) {\n      window.google.accounts.id.prompt();\n    }\n  };\n  const logout = () => {\n    // Sign out from Google\n    if (window.google) {\n      window.google.accounts.id.disableAutoSelect();\n    }\n    clearSession();\n  };\n  const clearSession = () => {\n    localStorage.removeItem('traderview_user');\n    localStorage.removeItem('traderview_login_time');\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    logout\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"xBgiRagNfQVCfEr2dT2PptfN+TE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","isAuthenticated","setIsAuthenticated","SESSION_TIMEOUT","checkExistingSession","loadGoogleScript","storedUser","localStorage","getItem","loginTime","currentTime","Date","getTime","timeDiff","parseInt","userData","JSON","parse","remainingTime","setTimeout","logout","clearSession","error","console","document","getElementById","script","createElement","id","src","async","defer","onload","initializeGoogleSignIn","head","appendChild","window","google","accounts","initialize","client_id","process","env","REACT_APP_GOOGLE_CLIENT_ID","callback","handleGoogleSignIn","auto_select","cancel_on_tap_outside","response","payload","atob","credential","split","sub","email","name","picture","given_name","family_name","setItem","stringify","toString","login","prompt","disableAutoSelect","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nsulur/dev/personal/traderview/plugin-frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst AuthContext = createContext();\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Session timeout: 2 hours (in milliseconds)\n  const SESSION_TIMEOUT = 2 * 60 * 60 * 1000;\n\n  useEffect(() => {\n    // Check for existing session on app load\n    checkExistingSession();\n    \n    // Load Google Identity Services\n    loadGoogleScript();\n  }, []);\n\n  const checkExistingSession = () => {\n    try {\n      const storedUser = localStorage.getItem('traderview_user');\n      const loginTime = localStorage.getItem('traderview_login_time');\n      \n      if (storedUser && loginTime) {\n        const currentTime = new Date().getTime();\n        const timeDiff = currentTime - parseInt(loginTime);\n        \n        if (timeDiff < SESSION_TIMEOUT) {\n          const userData = JSON.parse(storedUser);\n          setUser(userData);\n          setIsAuthenticated(true);\n          \n          // Set up auto-logout timer for remaining time\n          const remainingTime = SESSION_TIMEOUT - timeDiff;\n          setTimeout(() => {\n            logout();\n          }, remainingTime);\n        } else {\n          // Session expired\n          clearSession();\n        }\n      }\n    } catch (error) {\n      console.error('Error checking existing session:', error);\n      clearSession();\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadGoogleScript = () => {\n    if (document.getElementById('google-identity-script')) {\n      return;\n    }\n\n    const script = document.createElement('script');\n    script.id = 'google-identity-script';\n    script.src = 'https://accounts.google.com/gsi/client';\n    script.async = true;\n    script.defer = true;\n    script.onload = initializeGoogleSignIn;\n    document.head.appendChild(script);\n  };\n\n  const initializeGoogleSignIn = () => {\n    if (window.google) {\n      window.google.accounts.id.initialize({\n        client_id: process.env.REACT_APP_GOOGLE_CLIENT_ID || 'your-google-client-id',\n        callback: handleGoogleSignIn,\n        auto_select: false,\n        cancel_on_tap_outside: false,\n      });\n    }\n  };\n\n  const handleGoogleSignIn = (response) => {\n    try {\n      // Decode the JWT token to get user info\n      const payload = JSON.parse(atob(response.credential.split('.')[1]));\n      \n      const userData = {\n        id: payload.sub,\n        email: payload.email,\n        name: payload.name,\n        picture: payload.picture,\n        given_name: payload.given_name,\n        family_name: payload.family_name,\n      };\n\n      const loginTime = new Date().getTime();\n      \n      // Store user data and login time\n      localStorage.setItem('traderview_user', JSON.stringify(userData));\n      localStorage.setItem('traderview_login_time', loginTime.toString());\n      \n      setUser(userData);\n      setIsAuthenticated(true);\n      \n      // Set up auto-logout timer\n      setTimeout(() => {\n        logout();\n      }, SESSION_TIMEOUT);\n      \n    } catch (error) {\n      console.error('Error handling Google sign in:', error);\n    }\n  };\n\n  const login = () => {\n    if (window.google) {\n      window.google.accounts.id.prompt();\n    }\n  };\n\n  const logout = () => {\n    // Sign out from Google\n    if (window.google) {\n      window.google.accounts.id.disableAutoSelect();\n    }\n    \n    clearSession();\n  };\n\n  const clearSession = () => {\n    localStorage.removeItem('traderview_user');\n    localStorage.removeItem('traderview_login_time');\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    logout,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}