{"ast":null,"code":"// Mock API service for development mode with sample data\nexport const mockApi = {\n  // Check if we're in development mode with sample data\n  isUsingMockData: () => {\n    return process.env.NODE_ENV === 'development' && localStorage.getItem('traderview_sample_data') !== null;\n  },\n  // Get sample data from localStorage\n  getSampleData: () => {\n    const data = localStorage.getItem('traderview_sample_data');\n    return data ? JSON.parse(data) : null;\n  },\n  // Mock trading accounts API\n  getActiveAccounts: () => {\n    const sampleData = mockApi.getSampleData();\n    return Promise.resolve({\n      data: (sampleData === null || sampleData === void 0 ? void 0 : sampleData.accounts) || []\n    });\n  },\n  // Mock orders API\n  getOrdersByAccount: accountId => {\n    const sampleData = mockApi.getSampleData();\n    return Promise.resolve({\n      data: (sampleData === null || sampleData === void 0 ? void 0 : sampleData.orders) || []\n    });\n  },\n  // Mock symbols API\n  getSymbolsWithWeeklyStats: accountId => {\n    const sampleData = mockApi.getSampleData();\n    return Promise.resolve({\n      data: (sampleData === null || sampleData === void 0 ? void 0 : sampleData.symbols) || []\n    });\n  },\n  // Mock brokers API\n  getActiveBrokers: () => {\n    const sampleData = mockApi.getSampleData();\n    return Promise.resolve({\n      data: (sampleData === null || sampleData === void 0 ? void 0 : sampleData.brokers) || []\n    });\n  },\n  // Mock daily PnL API\n  getDailyPnl: (accountId, startDate, endDate) => {\n    const sampleData = mockApi.getSampleData();\n    if (!sampleData) return Promise.resolve({\n      data: []\n    });\n    return Promise.resolve({\n      data: sampleData.orders ? mockApi.generateDailyPnlFromOrders(sampleData.orders) : []\n    });\n  },\n  // Mock symbol performance API\n  getSymbolPerformance: (accountId, startDate, endDate) => {\n    const sampleData = mockApi.getSampleData();\n    if (!sampleData) return Promise.resolve({\n      data: []\n    });\n    return Promise.resolve({\n      data: sampleData.symbols ? sampleData.symbols.map(symbol => ({\n        symbol: symbol.ticker,\n        totalPnl: symbol.weeklyPnl,\n        trades: symbol.tradesThisWeek,\n        winRate: Math.random() * 100,\n        avgTradeSize: symbol.totalVolumeThisWeek / symbol.tradesThisWeek || 0\n      })) : []\n    });\n  },\n  // Mock trade stats API\n  getTradeStats: (accountId, params) => {\n    const sampleData = mockApi.getSampleData();\n    if (!sampleData) return Promise.resolve({\n      data: null\n    });\n    const orders = sampleData.orders || [];\n    const totalTrades = orders.length;\n    const totalPnl = orders.reduce((sum, order) => sum + (order.realizedPnl || 0), 0);\n    const winningTrades = orders.filter(order => (order.realizedPnl || 0) > 0).length;\n    return Promise.resolve({\n      data: {\n        totalTrades,\n        totalPnl,\n        winningTrades,\n        losingTrades: totalTrades - winningTrades,\n        winRate: totalTrades > 0 ? winningTrades / totalTrades * 100 : 0,\n        avgTradeSize: totalTrades > 0 ? orders.reduce((sum, order) => sum + (order.quantity || 0), 0) / totalTrades : 0,\n        largestWin: Math.max(...orders.map(order => order.realizedPnl || 0)),\n        largestLoss: Math.min(...orders.map(order => order.realizedPnl || 0))\n      }\n    });\n  },\n  // Helper function to generate daily PnL from orders\n  generateDailyPnlFromOrders: orders => {\n    const dailyPnl = [];\n    const dailyMap = {};\n\n    // Group orders by date\n    orders.forEach(order => {\n      const date = new Date(order.placedAt).toISOString().split('T')[0];\n      if (!dailyMap[date]) {\n        dailyMap[date] = {\n          pnl: 0,\n          trades: 0\n        };\n      }\n      dailyMap[date].pnl += order.realizedPnl || 0;\n      dailyMap[date].trades += 1;\n    });\n\n    // Generate last 30 days\n    let cumulativePnl = 0;\n    for (let i = 29; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n      const dayData = dailyMap[dateStr] || {\n        pnl: 0,\n        trades: 0\n      };\n      cumulativePnl += dayData.pnl;\n      dailyPnl.push({\n        date: dateStr,\n        pnl: dayData.pnl,\n        cumulativePnl: cumulativePnl,\n        trades: dayData.trades\n      });\n    }\n    return dailyPnl;\n  },\n  // Mock analytics API\n  getAnalytics: accountId => {\n    const sampleData = mockApi.getSampleData();\n    const orders = (sampleData === null || sampleData === void 0 ? void 0 : sampleData.orders) || [];\n\n    // Calculate analytics from sample orders\n    const totalTrades = orders.length;\n    const totalPnl = orders.reduce((sum, order) => sum + (order.realizedPnl || 0), 0);\n    const winningTrades = orders.filter(order => (order.realizedPnl || 0) > 0).length;\n    const losingTrades = orders.filter(order => (order.realizedPnl || 0) < 0).length;\n    const winRate = totalTrades > 0 ? winningTrades / totalTrades * 100 : 0;\n\n    // Group by symbol for top performers\n    const symbolStats = {};\n    orders.forEach(order => {\n      if (!symbolStats[order.symbolTicker]) {\n        symbolStats[order.symbolTicker] = {\n          symbol: order.symbolTicker,\n          trades: 0,\n          pnl: 0,\n          volume: 0\n        };\n      }\n      symbolStats[order.symbolTicker].trades++;\n      symbolStats[order.symbolTicker].pnl += order.realizedPnl || 0;\n      symbolStats[order.symbolTicker].volume += order.quantity || 0;\n    });\n    const topPerformers = Object.values(symbolStats).sort((a, b) => b.pnl - a.pnl).slice(0, 5);\n\n    // Generate daily PnL data for the last 30 days\n    const dailyPnl = [];\n    for (let i = 29; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      const dayOrders = orders.filter(order => {\n        const orderDate = new Date(order.placedAt);\n        return orderDate.toDateString() === date.toDateString();\n      });\n      const dayPnl = dayOrders.reduce((sum, order) => sum + (order.realizedPnl || 0), 0);\n      dailyPnl.push({\n        date: date.toISOString().split('T')[0],\n        pnl: dayPnl,\n        trades: dayOrders.length\n      });\n    }\n    return Promise.resolve({\n      data: {\n        totalTrades,\n        totalPnl,\n        winningTrades,\n        losingTrades,\n        winRate,\n        topPerformers,\n        dailyPnl,\n        avgTradeSize: totalTrades > 0 ? orders.reduce((sum, order) => sum + (order.quantity || 0), 0) / totalTrades : 0,\n        largestWin: Math.max(...orders.map(order => order.realizedPnl || 0)),\n        largestLoss: Math.min(...orders.map(order => order.realizedPnl || 0))\n      }\n    });\n  },\n  // Mock dashboard API\n  getDashboardData: accountId => {\n    const sampleData = mockApi.getSampleData();\n    const orders = (sampleData === null || sampleData === void 0 ? void 0 : sampleData.orders) || [];\n    const symbols = (sampleData === null || sampleData === void 0 ? void 0 : sampleData.symbols) || [];\n\n    // Recent orders (last 10)\n    const recentOrders = orders.sort((a, b) => new Date(b.placedAt) - new Date(a.placedAt)).slice(0, 10);\n\n    // Top symbols by trades this week\n    const topSymbols = symbols.sort((a, b) => b.tradesThisWeek - a.tradesThisWeek).slice(0, 5);\n\n    // Calculate summary stats\n    const todayOrders = orders.filter(order => {\n      const orderDate = new Date(order.placedAt);\n      const today = new Date();\n      return orderDate.toDateString() === today.toDateString();\n    });\n    const weekOrders = orders.filter(order => {\n      const orderDate = new Date(order.placedAt);\n      const weekAgo = new Date();\n      weekAgo.setDate(weekAgo.getDate() - 7);\n      return orderDate >= weekAgo;\n    });\n    return Promise.resolve({\n      data: {\n        recentOrders,\n        topSymbols,\n        todayStats: {\n          trades: todayOrders.length,\n          pnl: todayOrders.reduce((sum, order) => sum + (order.realizedPnl || 0), 0),\n          volume: todayOrders.reduce((sum, order) => sum + (order.quantity || 0), 0)\n        },\n        weekStats: {\n          trades: weekOrders.length,\n          pnl: weekOrders.reduce((sum, order) => sum + (order.realizedPnl || 0), 0),\n          volume: weekOrders.reduce((sum, order) => sum + (order.quantity || 0), 0)\n        }\n      }\n    });\n  }\n};","map":{"version":3,"names":["mockApi","isUsingMockData","process","env","NODE_ENV","localStorage","getItem","getSampleData","data","JSON","parse","getActiveAccounts","sampleData","Promise","resolve","accounts","getOrdersByAccount","accountId","orders","getSymbolsWithWeeklyStats","symbols","getActiveBrokers","brokers","getDailyPnl","startDate","endDate","generateDailyPnlFromOrders","getSymbolPerformance","map","symbol","ticker","totalPnl","weeklyPnl","trades","tradesThisWeek","winRate","Math","random","avgTradeSize","totalVolumeThisWeek","getTradeStats","params","totalTrades","length","reduce","sum","order","realizedPnl","winningTrades","filter","losingTrades","quantity","largestWin","max","largestLoss","min","dailyPnl","dailyMap","forEach","date","Date","placedAt","toISOString","split","pnl","cumulativePnl","i","setDate","getDate","dateStr","dayData","push","getAnalytics","symbolStats","symbolTicker","volume","topPerformers","Object","values","sort","a","b","slice","dayOrders","orderDate","toDateString","dayPnl","getDashboardData","recentOrders","topSymbols","todayOrders","today","weekOrders","weekAgo","todayStats","weekStats"],"sources":["/Users/nsulur/dev/personal/traderview/plugin-frontend/src/services/mockApi.js"],"sourcesContent":["// Mock API service for development mode with sample data\nexport const mockApi = {\n  // Check if we're in development mode with sample data\n  isUsingMockData: () => {\n    return process.env.NODE_ENV === 'development' && \n           localStorage.getItem('traderview_sample_data') !== null;\n  },\n\n  // Get sample data from localStorage\n  getSampleData: () => {\n    const data = localStorage.getItem('traderview_sample_data');\n    return data ? JSON.parse(data) : null;\n  },\n\n  // Mock trading accounts API\n  getActiveAccounts: () => {\n    const sampleData = mockApi.getSampleData();\n    return Promise.resolve({\n      data: sampleData?.accounts || []\n    });\n  },\n\n  // Mock orders API\n  getOrdersByAccount: (accountId) => {\n    const sampleData = mockApi.getSampleData();\n    return Promise.resolve({\n      data: sampleData?.orders || []\n    });\n  },\n\n  // Mock symbols API\n  getSymbolsWithWeeklyStats: (accountId) => {\n    const sampleData = mockApi.getSampleData();\n    return Promise.resolve({\n      data: sampleData?.symbols || []\n    });\n  },\n\n  // Mock brokers API\n  getActiveBrokers: () => {\n    const sampleData = mockApi.getSampleData();\n    return Promise.resolve({\n      data: sampleData?.brokers || []\n    });\n  },\n\n  // Mock daily PnL API\n  getDailyPnl: (accountId, startDate, endDate) => {\n    const sampleData = mockApi.getSampleData();\n    if (!sampleData) return Promise.resolve({ data: [] });\n\n    return Promise.resolve({\n      data: sampleData.orders ? mockApi.generateDailyPnlFromOrders(sampleData.orders) : []\n    });\n  },\n\n  // Mock symbol performance API\n  getSymbolPerformance: (accountId, startDate, endDate) => {\n    const sampleData = mockApi.getSampleData();\n    if (!sampleData) return Promise.resolve({ data: [] });\n\n    return Promise.resolve({\n      data: sampleData.symbols ? sampleData.symbols.map(symbol => ({\n        symbol: symbol.ticker,\n        totalPnl: symbol.weeklyPnl,\n        trades: symbol.tradesThisWeek,\n        winRate: Math.random() * 100,\n        avgTradeSize: symbol.totalVolumeThisWeek / symbol.tradesThisWeek || 0\n      })) : []\n    });\n  },\n\n  // Mock trade stats API\n  getTradeStats: (accountId, params) => {\n    const sampleData = mockApi.getSampleData();\n    if (!sampleData) return Promise.resolve({ data: null });\n\n    const orders = sampleData.orders || [];\n    const totalTrades = orders.length;\n    const totalPnl = orders.reduce((sum, order) => sum + (order.realizedPnl || 0), 0);\n    const winningTrades = orders.filter(order => (order.realizedPnl || 0) > 0).length;\n\n    return Promise.resolve({\n      data: {\n        totalTrades,\n        totalPnl,\n        winningTrades,\n        losingTrades: totalTrades - winningTrades,\n        winRate: totalTrades > 0 ? (winningTrades / totalTrades) * 100 : 0,\n        avgTradeSize: totalTrades > 0 ? orders.reduce((sum, order) => sum + (order.quantity || 0), 0) / totalTrades : 0,\n        largestWin: Math.max(...orders.map(order => order.realizedPnl || 0)),\n        largestLoss: Math.min(...orders.map(order => order.realizedPnl || 0))\n      }\n    });\n  },\n\n  // Helper function to generate daily PnL from orders\n  generateDailyPnlFromOrders: (orders) => {\n    const dailyPnl = [];\n    const dailyMap = {};\n\n    // Group orders by date\n    orders.forEach(order => {\n      const date = new Date(order.placedAt).toISOString().split('T')[0];\n      if (!dailyMap[date]) {\n        dailyMap[date] = { pnl: 0, trades: 0 };\n      }\n      dailyMap[date].pnl += order.realizedPnl || 0;\n      dailyMap[date].trades += 1;\n    });\n\n    // Generate last 30 days\n    let cumulativePnl = 0;\n    for (let i = 29; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      const dateStr = date.toISOString().split('T')[0];\n\n      const dayData = dailyMap[dateStr] || { pnl: 0, trades: 0 };\n      cumulativePnl += dayData.pnl;\n\n      dailyPnl.push({\n        date: dateStr,\n        pnl: dayData.pnl,\n        cumulativePnl: cumulativePnl,\n        trades: dayData.trades\n      });\n    }\n\n    return dailyPnl;\n  },\n\n  // Mock analytics API\n  getAnalytics: (accountId) => {\n    const sampleData = mockApi.getSampleData();\n    const orders = sampleData?.orders || [];\n    \n    // Calculate analytics from sample orders\n    const totalTrades = orders.length;\n    const totalPnl = orders.reduce((sum, order) => sum + (order.realizedPnl || 0), 0);\n    const winningTrades = orders.filter(order => (order.realizedPnl || 0) > 0).length;\n    const losingTrades = orders.filter(order => (order.realizedPnl || 0) < 0).length;\n    const winRate = totalTrades > 0 ? (winningTrades / totalTrades) * 100 : 0;\n    \n    // Group by symbol for top performers\n    const symbolStats = {};\n    orders.forEach(order => {\n      if (!symbolStats[order.symbolTicker]) {\n        symbolStats[order.symbolTicker] = {\n          symbol: order.symbolTicker,\n          trades: 0,\n          pnl: 0,\n          volume: 0\n        };\n      }\n      symbolStats[order.symbolTicker].trades++;\n      symbolStats[order.symbolTicker].pnl += order.realizedPnl || 0;\n      symbolStats[order.symbolTicker].volume += order.quantity || 0;\n    });\n\n    const topPerformers = Object.values(symbolStats)\n      .sort((a, b) => b.pnl - a.pnl)\n      .slice(0, 5);\n\n    // Generate daily PnL data for the last 30 days\n    const dailyPnl = [];\n    for (let i = 29; i >= 0; i--) {\n      const date = new Date();\n      date.setDate(date.getDate() - i);\n      const dayOrders = orders.filter(order => {\n        const orderDate = new Date(order.placedAt);\n        return orderDate.toDateString() === date.toDateString();\n      });\n      const dayPnl = dayOrders.reduce((sum, order) => sum + (order.realizedPnl || 0), 0);\n      \n      dailyPnl.push({\n        date: date.toISOString().split('T')[0],\n        pnl: dayPnl,\n        trades: dayOrders.length\n      });\n    }\n\n    return Promise.resolve({\n      data: {\n        totalTrades,\n        totalPnl,\n        winningTrades,\n        losingTrades,\n        winRate,\n        topPerformers,\n        dailyPnl,\n        avgTradeSize: totalTrades > 0 ? orders.reduce((sum, order) => sum + (order.quantity || 0), 0) / totalTrades : 0,\n        largestWin: Math.max(...orders.map(order => order.realizedPnl || 0)),\n        largestLoss: Math.min(...orders.map(order => order.realizedPnl || 0))\n      }\n    });\n  },\n\n  // Mock dashboard API\n  getDashboardData: (accountId) => {\n    const sampleData = mockApi.getSampleData();\n    const orders = sampleData?.orders || [];\n    const symbols = sampleData?.symbols || [];\n    \n    // Recent orders (last 10)\n    const recentOrders = orders\n      .sort((a, b) => new Date(b.placedAt) - new Date(a.placedAt))\n      .slice(0, 10);\n\n    // Top symbols by trades this week\n    const topSymbols = symbols\n      .sort((a, b) => b.tradesThisWeek - a.tradesThisWeek)\n      .slice(0, 5);\n\n    // Calculate summary stats\n    const todayOrders = orders.filter(order => {\n      const orderDate = new Date(order.placedAt);\n      const today = new Date();\n      return orderDate.toDateString() === today.toDateString();\n    });\n\n    const weekOrders = orders.filter(order => {\n      const orderDate = new Date(order.placedAt);\n      const weekAgo = new Date();\n      weekAgo.setDate(weekAgo.getDate() - 7);\n      return orderDate >= weekAgo;\n    });\n\n    return Promise.resolve({\n      data: {\n        recentOrders,\n        topSymbols,\n        todayStats: {\n          trades: todayOrders.length,\n          pnl: todayOrders.reduce((sum, order) => sum + (order.realizedPnl || 0), 0),\n          volume: todayOrders.reduce((sum, order) => sum + (order.quantity || 0), 0)\n        },\n        weekStats: {\n          trades: weekOrders.length,\n          pnl: weekOrders.reduce((sum, order) => sum + (order.realizedPnl || 0), 0),\n          volume: weekOrders.reduce((sum, order) => sum + (order.quantity || 0), 0)\n        }\n      }\n    });\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}